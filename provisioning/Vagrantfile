# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'


class AnsibleProvisioning
	def initialize(configuration)
		upper_ip_limit = 101 + configuration["sparkSlave"]["count"] - 1  # Defines spark slaves range
		slaves_list = Array.new  # Initialize list of spark slaves for ansible
		
		@on_guest = configuration["common"]["provision_on_guest"]
	
		@host_vars = {
			"producer" => {
				"ansible_host" => configuration["producer"]["ip"],
				"ansible_port" => "22",
				"ansible_ssh_pass" => "vagrant"
			},
			"consumer" => {
				"ansible_host" => configuration["consumer"]["ip"],
				"ansible_port" => "22",
				"ansible_ssh_pass" => "vagrant"
			},
			"sparkMaster" => {
				"ansible_host" => configuration["sparkMaster"]["ip"],
				"ansible_port" => "22",
				"ansible_ssh_pass" => "vagrant"
			}
		}		
		(101..upper_ip_limit).each do |i|
			slave_hostname = "sparkSlave#{i}"
			slave_ip =  "#{configuration["sparkSlave"]["ip_prefix"]}#{i}"
			slave_ansible_properties = {
				"ansible_host" => slave_ip,
				"ansible_port" => "22",
				"ansible_ssh_pass" => "vagrant"
			}
			slaves_list.push(slave_hostname)
			@host_vars[:"#{slave_hostname}"]  = slave_ansible_properties
		end
		
		@groups = {
				"producer" => ["producer"],
				"sparkMaster" => ["sparkMaster"],
				"sparkSlave" => slaves_list,
				"consumer" => ["consumer"]
		}
	end
	
	def install_python(virtual_machine)
		virtual_machine.vm.provision "shell" do |s|
				s.inline = "apt-get install -y python"
		end
	end
	
	def run_ansible(virtual_machine, playbook)
		provisioner = @on_guest ? :ansible_local : :ansible
	
		virtual_machine.vm.provision provisioner do |ansible|
			ansible.playbook = playbook
			ansible.groups = @groups
			ansible.host_vars = @host_vars
			if not @on_guest
				ansible.limit = 'all'
			end
		end
	end
	
	def provision(virtual_machine)
		if @on_guest
			install_python(virtual_machine)
			run_ansible(virtual_machine, "ansible/all.yml")
			machine_playbook = "ansible/" + virtual_machine.vm.hostname + ".yml"
			run_ansible(virtual_machine, machine_playbook)
		else
			if virtual_machine.vm.hostname == "consumer"
				run_ansible(virtual_machine, "ansible/site.yml")
			end
		end
	end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
	# The most common configuration options are documented and commented below.
	# For a complete reference, please see the online documentation at
	# https://docs.vagrantup.com.

	# Every Vagrant development environment requires a box. You can search for
	# boxes at https://atlas.hashicorp.com/search.
	# config.vm.box = "ubuntu/xenial64"
	
	# Load configuration
	provision_config = YAML.load_file("configuration.yml")
	
	# VM BOX CONFIGURATION
	config.vm.box = provision_config["common"]["box"]
	config.vm.box_url = provision_config["common"]["box_url"]

	# Set provisioning
	ansible_provisioning = AnsibleProvisioning.new(provision_config)
		
	# PRODUCER STARTUP:
	config.vm.define "producer" do |producer|
		producer.vm.hostname = "producer"

		producer.vm.network :private_network, ip: provision_config["producer"]["ip"]

		producer.vm.provider :virtualbox do |v|
			v.customize ["modifyvm", :id, "--memory", provision_config["producer"]["memory"]]
			v.customize ["modifyvm", :id, "--cpus", provision_config["producer"]["cpu"]]
			v.customize ["modifyvm", :id, "--name", "producer"]
		end

    ansible_provisioning.provision(producer)
	end

	# SPARK-MASTER STARTUP:
	config.vm.define "sparkMaster" do |sparkMaster|
		sparkMaster.vm.hostname = "sparkMaster"

		sparkMaster.vm.network :private_network, ip: provision_config["sparkMaster"]["ip"]

		sparkMaster.vm.provider :virtualbox do |v|
			v.customize ["modifyvm", :id, "--memory", provision_config["sparkMaster"]["memory"]]
			v.customize ["modifyvm", :id, "--cpus", provision_config["sparkMaster"]["cpu"]]
			v.customize ["modifyvm", :id, "--name", "sparkMaster"]
		end

    ansible_provisioning.provision(sparkMaster)
	end

	# SPARK-SLAVES STARTUP:
	upper_ip_limit = 101 + provision_config["sparkSlave"]["count"] - 1  # Defines spark slaves range

	# Iterate over spark slaves
	(101..upper_ip_limit).each do |i|
		sparkSlave_hostname = "sparkSlave#{i}"
		sparkSlave_ip =  "#{provision_config["sparkSlave"]["ip_prefix"]}#{i}"

		# Defining VM properties
		config.vm.define "sparkSlave#{i}" do |node|
			node.vm.hostname = sparkSlave_hostname
			node.vm.network :private_network, ip: sparkSlave_ip

			node.vm.provider :virtualbox do |v|
				v.customize ["modifyvm", :id, "--memory", provision_config["sparkSlave"]["memory"]]
				v.customize ["modifyvm", :id, "--cpus", provision_config["sparkSlave"]["cpu"]]
				v.customize ["modifyvm", :id, "--name", "sparkSlave#{i}"]
			end

      ansible_provisioning.provision(node)
		end
	end

	# CONSUMER STARTUP:
	config.vm.define "consumer" do |consumer|
		consumer.vm.hostname = "consumer"

		consumer.vm.network :private_network, ip: provision_config["consumer"]["ip"]

		consumer.vm.provider :virtualbox do |v|
			v.customize ["modifyvm", :id, "--memory", provision_config["consumer"]["memory"]]
			v.customize ["modifyvm", :id, "--cpus", provision_config["consumer"]["cpu"]]
			v.customize ["modifyvm", :id, "--name", "consumer"]
		end

    ansible_provisioning.provision(consumer)
	end
end
